# Function for forward substitution using L and b
    def forward_sub(self, L, b, index):
        """Forward substitution for a lower triangular matrix and a constant vector. 

        Parameters
        ----------
        L : numpy.ndarray
            Decomposed lower triangular matrix. 
        b : numpy.ndarray
            Vector of constants
        index : numpy.ndarray
            Vector containing indices of pivot elements in the original matrix.
            

        Returns
        -------
        y: numpy.ndarray
            Solution vector. 
        """
        n = len(b)
        b = copy.deepcopy(b)
        # Swapping b based on the index array
        for i in range(n):
            b[[i, int(index[i])]] = b[[int(index[i]), i]]
        y = np.zeros((n,))
        y[0] = b[0]/L[0,0]
        for i in range(1,n):
            alpha_ij_y_j = np.array([L[i,j]*y[j] for j in range(0,i)])
            y[i] = (1/L[i,i])*(b[i] - np.sum(alpha_ij_y_j))

        return y
