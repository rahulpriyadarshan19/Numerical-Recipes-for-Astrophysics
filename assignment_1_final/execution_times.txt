# Execution times of the three cases
    setup_lu_1 = """
import numpy as np
import matplotlib.pyplot as plt
from interpolation_routines.interpolation import interpolator
from numerical_solvers.equation_solver import numerical_solver

interp = interpolator()
solver = numerical_solver()

data = np.loadtxt("Vandermonde.txt")
x_data = data[:,0]
y_data = data[:,1]
N = len(x_data)

vandermonde = np.zeros((N,N))
for i in range(N):
    vandermonde[:,i] = x_data**i
    """

    s_lu_1 = """
L_v, U_v, index_v = solver.LU_Crout(A = vandermonde)
intermediate_y = solver.forward_sub(L = L_v, b = y_data, index = index_v)
coefficients = solver.backward_sub(U = U_v, y = intermediate_y)
    """

    t_lu_1 = timeit(stmt = s_lu_1, setup = setup_lu_1, number = 100)
    with open("runtimes.txt", "w") as f:
        print("Time to run 1 LU iteration: ", t_lu_1, file = f)
    
    setup_neville = """
import numpy as np
import matplotlib.pyplot as plt
from interpolation_routines.interpolation import interpolator
from numerical_solvers.equation_solver import numerical_solver

interp = interpolator()
solver = numerical_solver()

data = np.loadtxt("Vandermonde.txt")
x_data = data[:,0]
y_data = data[:,1]
N = len(x_data)

x_points = np.array([])
for i in range(N-1):
    x_interp = np.linspace(x_data[i], x_data[i+1], num = 50)
    if i == 0:
        x_points = np.append(x_points, x_interp)
    else:
        x_points = np.append(x_points, x_interp[1:])

    """

    s_neville = """
polynomial_neville = [] 
for x in x_points:
    y = interp.neville(x = x, x_data = x_data, y_data = y_data, order = 19)
    polynomial_neville.append(y)
polynomial_neville = np.asarray(polynomial_neville)
    """

    t_neville = timeit(stmt = s_neville, setup = setup_neville, number = 100)
    with open("runtimes.txt", "a") as f:
        print("Time to run Neville's algorithm: ", t_neville, file = f)

    setup_lu_10 = """
import numpy as np
import matplotlib.pyplot as plt
from interpolation_routines.interpolation import interpolator
from numerical_solvers.equation_solver import numerical_solver

interp = interpolator()
solver = numerical_solver()

data = np.loadtxt("Vandermonde.txt")
x_data = data[:,0]
y_data = data[:,1]
N = len(x_data)

vandermonde = np.zeros((N,N))
for i in range(N):
    vandermonde[:,i] = x_data**i

L_v, U_v, index_v = solver.LU_Crout(A = vandermonde)
intermediate_y = solver.forward_sub(L = L_v, b = y_data, index = index_v)
coefficients = solver.backward_sub(U = U_v, y = intermediate_y)
    """

    s_lu_10 = """
coeffs_iterated = coefficients
for j in range(10):
    b_new = vandermonde@coeffs_iterated - y_data
    int_y = solver.forward_sub(L = L_v, b = b_new, index = index_v)
    delta_coeffs = solver.backward_sub(U = U_v, y = int_y)
    coeffs_iterated = coeffs_iterated - delta_coeffs
        """
    
    t_lu_10 = timeit(stmt = s_lu_10, setup = setup_lu_10, number = 100)
    with open("runtimes.txt", "a") as f:
        print("Time to run 10 LU iterations: ", t_lu_10, file = f)
